{"version":3,"sources":["NACCS_Logo.png","config.js","Banner.js","hooks/useFirestore.js","BannerCreator.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","projectFirestore","firestore","FieldValue","serverTimestamp","Banner","props","leftName","leftImg","rightName","rightImg","className","id","this","src","logo","style","width","height","React","Component","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","BannerCreator","Form","onSubmit","event","preventDefault","form","target","value","document","getElementById","innerHTML","FormGroup","Label","for","Input","type","name","placeholder","map","url","Button","margin","color","onClick","node","sendto","htmlToImage","then","dataUrl","console","log","img","Image","appendChild","catch","error","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9189aa30.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/NACCS_Logo.0605a314.png\";","import firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\n  // Your web app's Firebase configuration\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyCi3gtSt6U3k39y156wkjrewlb2DMxVfOo\",\r\n    authDomain: \"csgo-banner-generator.firebaseapp.com\",\r\n    projectId: \"csgo-banner-generator\",\r\n    storageBucket: \"csgo-banner-generator.appspot.com\",\r\n    messagingSenderId: \"751829184636\",\r\n    appId: \"1:751829184636:web:f5d775aa3b5f69d16399f9\",\r\n    measurementId: \"G-JWKF8WQRNK\"\r\n  };\r\n\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  const projectStorage = firebase.storage();\r\n  const projectFirestore = firebase.firestore();\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n\r\nexport { projectStorage, projectFirestore, timestamp };","import React from 'react';\r\nimport './App.scss';\r\nimport logo from './NACCS_Logo.png';\r\nimport { Modal, ModalHeader, ModalBody, Button, ModalFooter, Form, FormGroup, Label, Input} from 'reactstrap';\r\nimport firebase from './config';\r\n\r\n\r\nclass Banner extends React.Component {\r\n\r\n    \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.leftName = this.props.leftName\r\n        this.leftImg = this.props.leftImg\r\n        this.rightName = this.props.rightName\r\n        this.rightImg = this.props.rightImg\r\n\r\n            //left: polygon(0 0, 100% 0, 100% 100%, 80% 100%, 15% 80%, 0 80%);\r\n            //right: polygon(0 0, 100% 0, 100% 80%, 85% 80%, 20% 100%, 0 100%);\r\n            //polygon(0 0, 100% 0, 100% 80%, 0 80%);\r\n            //clip-path: polygon(0 0, 0 80%, 23% 80%, 33% 90%, 67% 90%, 77% 80%, 100% 80%, 100% 0);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n\r\n            \r\n                <div className=\"flexcontainer\" id=\"testthing\"> \r\n                    <div className=\"newbox\" id = \"leftMost\">{this.props.leftName}</div>\r\n                    <div className=\"newbox\" id = \"left\">{this.props.leftImg}</div>\r\n                    <div className=\"centerbox\" id =\"center\">\r\n                        <img src={logo} style={{width: '200px', height: 'auto'}}></img>\r\n                    </div>\r\n                    <div className=\"newbox\" id = \"right\">{this.props.rightName}</div>\r\n                    <div className=\"newbox\" id = \"rightMost\">{this.props.rightImg}</div>\r\n                </div>\r\n            \r\n\r\n            )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Banner;","import {useState, useEffect} from 'react';\r\nimport {projectFirestore} from '../config';\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({...doc.data(), id: doc.id});\r\n                })\r\n                setDocs(documents);\r\n            });\r\n        return () => unsub();\r\n\r\n    }, [collection])\r\n\r\n    return {docs} ;\r\n\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport * as htmlToImage from 'html-to-image';\r\nimport useFirestore from './hooks/useFirestore';\r\nimport { toPng, toJpeg, toBlob, toPixelData, toSvg } from 'html-to-image';\r\nimport {Button, Input, Form, FormGroup, Label} from 'reactstrap';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst BannerCreator = () => {\r\n\r\n  const handleClick = () => {\r\n\r\n    var node = document.getElementById('testthing');\r\n    \r\n    var sendto = document.getElementById('renderto');\r\n    \r\n      htmlToImage.toPng(node)\r\n        .then(function (dataUrl) {\r\n          console.log('here');\r\n          var img = new Image();\r\n          img.src = dataUrl;\r\n          sendto.appendChild(img);\r\n        })\r\n        .catch(function (error) {\r\n          console.error('oops, something went wrong!', error);\r\n        });\r\n    \r\n    \r\n    }\r\n\r\n  const {docs} = useFirestore('images');\r\n\r\n  const otherHandler = (event) => {\r\n    event.preventDefault();\r\n    const form = event.target;\r\n  \r\n    var leftName = form.leftName.value;\r\n    var leftImg = form.leftImg.value;\r\n    var rightName = form.rightName.value;\r\n    var rightImg = form.rightImg.value;\r\n  \r\n    document.getElementById('leftMost').innerHTML = '<img src=\"' + leftImg +'\"/>';\r\n    document.getElementById('left').innerHTML = '<h1>' + leftName + '</h1>';\r\n    document.getElementById('right').innerHTML = '<h1>' + rightName + '</h1>';\r\n    document.getElementById('rightMost').innerHTML = '<img src=\"' + rightImg +'\"/>';\r\n  }\r\n\r\n        return(\r\n            <div className=\"test\"> \r\n\r\n              <Form id=\"course\" onSubmit={otherHandler}>\r\n                      <FormGroup>\r\n                          <Label for=\"leftName\">Left Name</Label>\r\n                          <Input type=\"text\" name=\"leftName\" id=\"leftName\" placeholder='Name'/>\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                          <Label for=\"leftImg\">Left Image</Label>\r\n                          <Input type=\"select\" name=\"leftImg\" id=\"leftImg\">\r\n                            {docs.map((doc) => \r\n                              <option key={doc.name} value={doc.url}>{doc.name}</option>\r\n                            )}\r\n                            </Input>\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                          <Label for=\"rightName\">Right Name</Label>\r\n                          <Input type=\"text\" name=\"rightName\" id=\"rightName\" placeholder='Name'/>\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                          <Label for=\"rightImg\">Right Image</Label>\r\n                          <Input type=\"select\" name=\"rightImg\" id=\"rightImg\">\r\n                            {docs.map((doc) => \r\n                              <option key={doc.name} value={doc.url}>{doc.name}</option>\r\n                            )}\r\n                            </Input>\r\n                      </FormGroup>\r\n                </Form>\r\n\r\n                <Button style={{margin: '5px'}} color='primary' type=\"submit\" form=\"course\" className=\"btn btn-primary\">Ok</Button>\r\n                \r\n                <br/>\r\n                <Button style={{margin: '5px'}} color='primary' className=\"btn btn-primary\"  onClick={handleClick}>Click to Render</Button>\r\n            </div>\r\n        )\r\n\r\n\r\n}\r\n\r\n\r\nexport default BannerCreator;","import React from 'react';\nimport './App.scss';\nimport Banner from './Banner';\nimport BannerCreator from './BannerCreator';\nimport firebase from './config';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\n\n/*\n  <UploadForm/>\n      <ImageGrid/>\n*/\n\nfunction App() {\n  return (\n    \n    <div className=\"App\" >\n      \n      <div id=\"my-node\">\n        <Banner id=\"bannerbox\"></Banner>\n        <br/>\n        \n      </div>\n\n\n      <div className=\"main\"> \n        <BannerCreator/>\n      </div>\n\n      \n      \n      <h1>Your image will be located below!</h1>\n\n      <br/>\n\n      <div id=\"renderto\"></div>\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}